name: Performance & SEO Monitor

on:
  schedule:
    # 每周三凌晨3点运行
    - cron: "0 3 * * 3"
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  lighthouse-audit:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: |
          echo "⏳ Waiting for deployment to complete..."

          # 等待最多5分钟，每30秒检查一次
          for i in {1..10}; do
            echo "Attempt $i/10: Checking if site is available..."
            if curl -f -s -o /dev/null -w "%{http_code}" https://hippiezhou.github.io | grep -q "200"; then
              echo "✅ Site is available!"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "⚠️  Site not available after 5 minutes, proceeding anyway..."
            else
              echo "⏳ Site not ready yet, waiting 30 seconds..."
              sleep 30
            fi
          done

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://hippiezhou.github.io
            https://hippiezhou.github.io/about/
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: "./.lighthouserc.json"

      - name: Comment PR with Lighthouse results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const lighthouseResults = JSON.parse(fs.readFileSync('.lighthouseci/manifest.json', 'utf8'));

            let comment = '## 🚀 Lighthouse Performance Report\n\n';

            lighthouseResults.forEach(result => {
              const scores = result.summary;
              comment += `### ${result.url}\n`;
              comment += `- **Performance**: ${Math.round(scores.performance * 100)}/100\n`;
              comment += `- **Accessibility**: ${Math.round(scores.accessibility * 100)}/100\n`;
              comment += `- **Best Practices**: ${Math.round(scores['best-practices'] * 100)}/100\n`;
              comment += `- **SEO**: ${Math.round(scores.seo * 100)}/100\n\n`;
            });

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  seo-check:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./src/package-lock.json"

      - name: Install dependencies
        run: npm ci
        working-directory: ./src

      - name: Build site
        run: npm run build
        working-directory: ./src

      - name: Check meta tags
        run: |
          echo "Checking meta tags in HTML files..."

          # 检查是否有必要的meta标签
          HTML_FILES=$(find public -name "*.html" | head -10)

          for file in $HTML_FILES; do
            echo "Checking $file..."
            
            # 检查title标签
            if ! grep -q '<title>' "$file"; then
              echo "⚠️  Missing title tag in $file"
            fi
            
            # 检查meta description
            if ! grep -q 'name="description"' "$file"; then
              echo "⚠️  Missing meta description in $file"
            fi
            
            # 检查viewport meta
            if ! grep -q 'name="viewport"' "$file"; then
              echo "⚠️  Missing viewport meta tag in $file"
            fi
            
            # 检查Open Graph tags
            if ! grep -q 'property="og:' "$file"; then
              echo "ℹ️  No Open Graph tags found in $file"
            fi
          done

      - name: Check for broken internal links
        run: |
          echo "Checking for broken internal links..."

          # 简单的内部链接检查
          HTML_FILES=$(find public -name "*.html")

          for file in $HTML_FILES; do
            # 提取相对链接
            grep -o 'href="[^"]*"' "$file" | grep -v '^href="http' | grep -v '^href="mailto:' | grep -v '^href="#"' | while read link; do
              href=$(echo "$link" | sed 's/href="//' | sed 's/"//')
              if [[ "$href" != "/" && "$href" != "" ]]; then
                target_file="public$href"
                if [[ "$href" == *.html ]]; then
                  if [[ ! -f "$target_file" ]]; then
                    echo "❌ Broken link in $file: $href"
                  fi
                fi
              fi
            done
          done

      - name: Check image optimization
        run: |
          echo "Checking image optimization..."

          # 检查图片文件大小
          IMAGE_FILES=$(find public -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.webp" \))

          for img in $IMAGE_FILES; do
            size=$(stat -f%z "$img" 2>/dev/null || stat -c%s "$img" 2>/dev/null)
            if [ "$size" -gt 1048576 ]; then  # 1MB
              echo "⚠️  Large image file: $img ($(($size / 1024 / 1024))MB)"
            fi
          done

      - name: Generate SEO report
        run: |
          echo "## 📊 SEO Report" > seo-report.md
          echo "" >> seo-report.md
          echo "### Files Checked:" >> seo-report.md
          find public -name "*.html" | wc -l | xargs echo "- HTML files: " >> seo-report.md
          find public -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.webp" \) | wc -l | xargs echo "- Image files: " >> seo-report.md
          echo "" >> seo-report.md
          echo "### Recommendations:" >> seo-report.md
          echo "- Ensure all pages have unique titles and descriptions" >> seo-report.md
          echo "- Optimize images for web (compress, use WebP format)" >> seo-report.md
          echo "- Add structured data markup where appropriate" >> seo-report.md
          echo "- Ensure mobile responsiveness" >> seo-report.md

      - name: Upload SEO report
        uses: actions/upload-artifact@v4
        with:
          name: seo-report
          path: seo-report.md
          retention-days: 30
